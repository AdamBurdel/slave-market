CREATE TABLE master
(
    id   INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE slave
(
    id             INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name           VARCHAR(255) NOT NULL,
    price_per_hour INT          NOT NULL,
    weight         INT          NOT NULL,
    sex            INT          NOT NULL
);

CREATE TABLE category
(
    id        INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parent_id INT DEFAULT NULL,
    name      VARCHAR(255) NOT NULL
);

CREATE TABLE slave_category
(
    slave_id    INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (slave_id, category_id)
);


ALTER TABLE category
    ADD CONSTRAINT fk_category_parent FOREIGN KEY (parent_id) REFERENCES category (id) NOT DEFERRABLE INITIALLY IMMEDIATE;

ALTER TABLE "slave_category"
    ADD FOREIGN KEY ("slave_id") REFERENCES "public"."slave" ("id");

ALTER TABLE slave_category
    ADD CONSTRAINT fk_slave_category FOREIGN KEY (category_id) REFERENCES category (id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE;


//Запросы

--Получить минимальную, максимальную и среднюю стоимость всех рабов весом более 60 кг.
SELECT MAX(weight) as MaxWeight,
       AVG(weight) as AvgWeight,
       MIN(weight) as MinWeight
FROM slave

--Выбрать категории, в которых больше 10 рабов.
SELECT COUNT(*) as slavesInCategory,
       category_id
FROM slave_category
GROUP BY category_id
HAVING COUNT(*) > 5;

--Выбрать категорию с наибольшей суммарной стоимостью рабов.
SELECT category.name       AS categoryName,
       SUM(price_per_hour) AS categorySummaryPrice
FROM category
         INNER JOIN slave_category ON category.id = slave_category.category_id
         INNER JOIN slave ON slave.id = slave_category.slave_id
GROUP BY category.id
ORDER BY categorySummaryPrice DESC LIMIT 1

--Выбрать категории, в которых мужчин больше чем женщин.
SELECT category.name    AS categoryName,
       sum(
               CASE
                   WHEN slave.sex = 1 THEN
                       1
                   ELSE
                       0
                   END) AS maleCount,
       sum(
               CASE
                   WHEN slave.sex = 2 THEN
                       1
                   ELSE
                       0
                   END) AS femaleCount
FROM category
         INNER JOIN slave_category ON category.id = slave_category.category_id
         INNER JOIN slave ON slave.id = slave_category.slave_id
GROUP BY category.id
HAVING sum(
               CASE
                   WHEN slave.sex = 1 THEN
                       1
                   ELSE
                       0
                   END) > sum(
               CASE
                   WHEN slave.sex = 2 THEN
                       1
                   ELSE
                       0
                   END)